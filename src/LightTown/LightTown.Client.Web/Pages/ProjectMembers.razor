@page "/projects/{ProjectId:int}/members"

@using LightTown.Client.Services.Projects
@using LightTown.Client.Services.Users
@using LightTown.Client.Web.Services
@using LightTown.Core.Models.Users

@inject IUserDataService UserDataService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject IUserService UserService;

<h1> <br/> Name: @_project?.ProjectName</h1>
<p1>Creation Date: @_project?.CreationDateTime</p1>

<Modal @ref="MemberModal">
    <h2>Add Members To Project</h2>
    <Input Type="text" Placeholder="Username" OnChange="@OnSearchQueryChange"/>
    <Grid>
        <GridColumn ColumnSize="ColumnSize.Full">
            <br/>
            @foreach (var user in users)
            {
                <Grid>
                    <GridColumn ColumnSize="ColumnSize.Medium">
                        <p1>@user.Username</p1>
                    </GridColumn>
                    <GridColumn ColumnSize="ColumnSize.Small">
                        <Button Text="Add To Project" Enabled="true" Size="ButtonSize.Full" OnClick="@(() => AddMemberToProject(user.Id))"></Button>
                    </GridColumn>
                </Grid>
            }
        </GridColumn>
    </Grid>
    <br/>
    <Button OnClick="(() => HideModal())" Text="Close Window"></Button>
</Modal>

<Grid>
    <GridColumn ColumnSize="ColumnSize.Small">
        <GridItem>
            <ListGroup Class="mw-300 m-auto">
                <ListGroupHeader Text="@_project.ProjectName"></ListGroupHeader>
                <ListGroupItem IsLink="true" Link="@($"/projects/{ProjectId}")" Text="Overview"></ListGroupItem>
                <ListGroupItem IsLink="true" Link="@($"/projects/{ProjectId}/members")" Text="Members" Active="true"></ListGroupItem>
            </ListGroup>
        </GridItem>
    </GridColumn>
</Grid>
<Grid>
    <GridColumn ColumnSize="ColumnSize.Full">

        @if (_project?.Members != null)
        {
            foreach (var member in _project.Members)
            {
                <GridItem>
                    <FormGroup>
                        <p1>Name: @member.Username</p1>
                    </FormGroup>
                    <FormGroup>
                        <p1>Email: @member.Email</p1>
                    </FormGroup>
                    <FormGroup>
                        <Button Enabled="@true" Text="Remove From Project" OnClick="@(() => RemoveMemberFromProject(member.Id))" Size="ButtonSize.Full"></Button>
                    </FormGroup>
                </GridItem>
            }
        }
    </GridColumn>
    <Button OnClick="@(() => ShowModal())" Text="Add Member" Size="ButtonSize.Full"></Button>
</Grid>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    private LightTown.Core.Models.Projects.Project _project;

    private bool active;

    private Modal MemberModal = new Modal();

    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.HasAccessToPage(NavigationManager.Uri))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        MemberModal.Visible = false;

        _project = await UserDataService.GetProject(ProjectId);
        _project.Members = await UserDataService.GetProjectMembers(ProjectId);
    }

    private async Task RemoveMemberFromProject(int userId)
    {
        await ProjectService.RemoveMember(ProjectId, userId);

        _project.Members = await ProjectService.GetProjectMembers(ProjectId);

        StateHasChanged();
    }

    private async Task HideModal()
    {
        await MemberModal.Hide();
    }

    private async Task ShowModal()
    {
        await MemberModal.Show();
    }

    private async Task OnSearchQueryChange(string value)
    {
        users = await UserService.SearchUsers(value);
        StateHasChanged();
    }

    private async Task AddMemberToProject(int userId)
    {
        await ProjectService.AddMember(userId, ProjectId);

        _project.Members = await ProjectService.GetProjectMembers(ProjectId);

        StateHasChanged();
    }
}
