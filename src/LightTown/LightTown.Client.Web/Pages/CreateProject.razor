@page "/projects/create"
@using LightTown.Client.Services.Validation
@using LightTown.Client.Services.Projects

@inject IValidationService ValidationService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager


<Form>
    <FormGroup>
        <Input Type="text" Placeholder="Project Name" OnChange="@OnProjectNameChange" />
    </FormGroup>
    <FormGroup>
        <Input Type="text" Placeholder="Description" OnChange="@OnDescriptionChange" />
    </FormGroup>
    <FormGroup>
        <Button Enabled="@_buttonEnabled" Text="Create" OnClick="@CreateProjectAsync" Size="ButtonSize.Full"></Button>
    </FormGroup>
    <FormGroup>
        <p1>@_creationResult</p1>
    </FormGroup>
</Form>

@code {

    private bool _buttonEnabled;
    private bool _projectCreationSuccess = true;

    private string _projectName;
    private string _description;
    private string _creationResult;

    public Task OnProjectNameChange(string value)
    {
        _projectName = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnDescriptionChange(string value)
    {
        _description = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    private void ValidateInput()
    {
        _buttonEnabled = ValidationService.ValidateProjectCreationInput(_projectName, _description);

        StateHasChanged();
    }

    private async Task CreateProjectAsync()
    {
        //TODO better error handling
        var project = await ProjectService.CreateProject(_projectName, _description);

        _projectCreationSuccess = project != null;
        
        if (_projectCreationSuccess)
        {
            _creationResult = "Successfully created the new project";
            StateHasChanged();
            //NavigationManager.NavigateTo("/projects");
        }
        else
        {
            _creationResult = "Something went wrong during creation";
            StateHasChanged();
        }
    }
}
