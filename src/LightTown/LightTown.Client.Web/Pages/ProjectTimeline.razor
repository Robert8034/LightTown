@page "/projects/{ProjectId:int}/timeline"
@using LightTown.Client.Services.Projects
@using LightTown.Client.Services.Users
@using LightTown.Client.Services.Validation
@using LightTown.Client.Web.Services
@using LightTown.Core.Models.Messages

@inject IUserDataService UserDataService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject IValidationService ValidationService

<Grid>
    <GridColumn ColumnSize="ColumnSize.Full">

        <Grid>
            <GridColumn ColumnSize="ColumnSize.Small">
            </GridColumn>
            <GridColumn ColumnSize="ColumnSize.Medium">
                <Grid>
                    <GridColumn ColumnSize="ColumnSize.Full">
                        <GridItem>
                            <h1> <br /> Name: @_project?.ProjectName</h1>
                        </GridItem>
                    </GridColumn>
                    <GridColumn ColumnSize="ColumnSize.Small">
                    </GridColumn>
                </Grid>
            </GridColumn>
        </Grid>

        <Grid>
            <GridColumn ColumnSize="ColumnSize.Small">
                <GridItem>
                    <ListGroup Class="mw-300 m-auto">
                        <ListGroupHeader Text="@_project.ProjectName"></ListGroupHeader>
                        <ListGroupItem IsLink="true" Link="@($"/projects/{ProjectId}")" Text="Overview"></ListGroupItem>
                        <ListGroupItem IsLink="true" Link="@($"/projects/{ProjectId}/members")" Text="Members" Active="true"></ListGroupItem>
                        <ListGroupItem IsLink="true" Link="@($"/projects/{ProjectId}/timeline")" Text="Messages"></ListGroupItem>
                    </ListGroup>
                </GridItem>
            </GridColumn>
            <GridColumn ColumnSize="ColumnSize.Medium">
                <Button OnClick="(() => ShowModal())" Text="Create Message"></Button>
                <hr class="underLine" style="border: solid; color: #298ECC"/>
                <Grid>
                    @foreach (var message in _projectMessages)
                    {
                        <GridColumn ColumnSize="ColumnSize.Small">
                            <GridItem>
                                <h4>@message.Title</h4>
                            </GridItem>
                        </GridColumn>
                        <GridColumn ColumnSize="ColumnSize.Medium">
                            <GridItem>
                                <p>
                                    @message.Content
                                </p>
                            </GridItem>
                        </GridColumn>
                        <GridColumn ColumnSize="ColumnSize.Small">
                            <Button Enabled="@true" Text="View" Size="ButtonSize.Big"></Button>
                        </GridColumn>
                    }
                </Grid>
            </GridColumn>
        </Grid>
    </GridColumn>
</Grid>

<Modal @ref="MessageModal">
    <h2>Create a message</h2>
    <FormGroup>
        <Input Type="text" Placeholder="Title" OnChange="@OnTitleChange" />
    </FormGroup>
    <br/>
    <FormGroup>
        <Input Type="text" Placeholder="Content" OnChange="@OnContentChange" />
    </FormGroup>
    <br/>
    <Button OnClick="(() => CreateProjectMessage())" Text="Post Message" Enabled="@_buttonEnabled"></Button>
    <br />
    <Button OnClick="(() => HideModal())" Text="Close Window"></Button>
    <br />
</Modal>

@code {

    [Parameter]
    public int ProjectId { get; set; }

    private LightTown.Core.Models.Projects.Project _project = new Core.Models.Projects.Project();
    private List<Message> _projectMessages = new List<Message>();
    private Modal MessageModal = new Modal();

    private string _title;
    private string _content;
    private bool _buttonEnabled;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.HasAccessToPage(NavigationManager.Uri))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        MessageModal.Visible = false;

        _project = await UserDataService.GetProject(ProjectId);

        _projectMessages = await UserDataService.GetProjectMessages(ProjectId);
    }

    private async Task CreateProjectMessage()
    {

        await ProjectService.PostProjectMessage(ProjectId, _content, _title);

        _projectMessages = await ProjectService.GetProjectMessages(ProjectId);

        _title = "";
        _content = "";

        await HideModal();

        StateHasChanged();

    }

    private async Task HideModal()
    {
        await MessageModal.Hide();
    }

    private async Task ShowModal()
    {
        await MessageModal.Show();
    }

    private void ValidateInput()
    {
        _buttonEnabled = ValidationService.ValidateLoginInput(_content, _title);

        StateHasChanged();
    }

    public Task OnTitleChange(string value)
    {
        _title = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnContentChange(string value)
    {
        _content = value;

        ValidateInput();

        return Task.CompletedTask;
    }

}
