@page "/"
@using LightTown.Client.Services.Messages
@using LightTown.Client.Services.Projects
@using LightTown.Client.Services.Users
@using LightTown.Client.Services.Validation
@using LightTown.Client.Web.Services
@using LightTown.Core.Models.Messages
@using LightTown.Core.Models.Users

@inject IUserDataService UserDataService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject IValidationService ValidationService
@inject IMessageService MessageService

<Grid>
    <GridColumn ColumnSize="ColumnSize.Full">
        <Grid>
            <GridColumn ColumnSize="ColumnSize.Full">
                <p>

                </p>
            </GridColumn>
        </Grid>
        <GridColumn ColumnSize="ColumnSize.Full">

        @foreach(var message in _projectMessages) 
        { 
            <hr class="underLine" style="border-style:solid;border-width:thin;color:#298ECC" />
            <Grid>
                <GridColumn Class="grid-align-center" ColumnSize="ColumnSize.Small">
                    <GridItem>
                        <p class="text-center">
                            14 MAY @*Date posted here*@
                        </p>
                        <Button Enabled="true" Text="Like" Size="ButtonSize.Small"></Button>
                        <p class="text-center">@message.MessageLikes.Count()</p>
                    </GridItem>
                </GridColumn>
                <GridColumn ColumnSize="ColumnSize.Full">
                    <GridItem>
                        <h3 class="titletxt">@message.Title</h3>
                        <h5>By: @message.UserId</h5>
                        <h4 class="subtext">Get ProjectByID</h4>
                        <p>
                            @message.Content
                        </p>
                    </GridItem>
                </GridColumn>
                <GridColumn Class="grid-align-bottomright" ColumnSize="ColumnSize.Small">
                    <Button Enabled="@true" Text="View" OnClick="() => ViewProject(message.ProjectId)" Size="ButtonSize.Medium"></Button>
                </GridColumn>
            </Grid>
        }
       </GridColumn>

    </GridColumn>
</Grid>

@code {

    List<Core.Models.Projects.Project> _projects;
    private List<Message> _projectMessages = new List<Message>();

    private User _currentUser = new User();

    /*Sort by date/time posted*/
    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.HasAccessToPage(NavigationManager.Uri))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _projects = await UserDataService.GetProjects();

        await getAllMessages();

        _currentUser = UserDataService.GetCurrentUser();

    }

    private Task ViewProject(int projectId)
    {
        NavigationManager.NavigateTo("/projects/" + projectId + "/timeline");

        return Task.CompletedTask;
    }

    private async Task getAllMessages()
    {
        _projectMessages.Clear();

        List<Message> _projectMessage = new List<Message>();
        foreach (var _project in _projects)
        {
            _projectMessage = await ProjectService.GetProjectMessages(_project.Id);
            _projectMessages.AddRange(_projectMessage);
        }

        _projectMessages.Sort((x, y) => y.Id.CompareTo(x.Id));
    }

    

}