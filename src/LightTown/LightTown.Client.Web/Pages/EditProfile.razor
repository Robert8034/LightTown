@page "/profile/edit"

@using LightTown.Client.Services.Projects
@using LightTown.Client.Services.Users
@using LightTown.Client.Web.Services
@using LightTown.Core
@using User = LightTown.Core.Models.Users.User
@using System.IO
@using System.Runtime.CompilerServices

@inject IUserDataService UserDataService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject HttpClient HttpClient

<Grid Class="mt-4">
    <GridColumn ColumnSize="ColumnSize.Medium">
        <Form Class="w-100">
            <FormGroup>
                <Input Placeholder="Job" Title="Job" Text="What is your job called?" Type="text" Value="@_user.Job" OnChange="@((value) => OnJobChange(value))"/>
            </FormGroup>
            <FormGroup>
                <Input Placeholder="Age" Title="Age" Text="What is your age?" Type="number" Value="@_user.Age" OnChange="@((value) => OnAgeChange(value))"/>
            </FormGroup>
            <FormGroup>
                <Input Placeholder="Hometown" Title="Hometown" Text="Where do you live?" Type="text" Value="@_user.Hometown" OnChange="@((value) => OnHometownChange(value))"/>
            </FormGroup>
            <FormGroup>
                <TextArea Placeholder="About" Title="About" Text="Tell everyone something about yourself." Value="@_user.About" OnChange="@((value) => OnAboutChange(value))"></TextArea>
            </FormGroup>
            <FormGroup AlignContent="AlignContent.Right">
                @if (!string.IsNullOrEmpty(_userErrorMessage))
                {
                    <span class="text text-danger">@_userErrorMessage</span>
                }
                <Button Text="Save" Enabled="@CanSave()" OnClick="@(async () => await SaveUser())"></Button>
            </FormGroup>
        </Form>
    </GridColumn>
    <GridColumn Class="d-flex align-items-center" ColumnSize="ColumnSize.Small">
        <ImageFileSelect Class="mw-300" Src="@_avatarSource" OnChange="@(file => OnAvatarChange(file))" CanSave="@CanSaveAvatar()" OnSave="@(async () => OnAvatarSave())"></ImageFileSelect>
        @if (!string.IsNullOrEmpty(_avatarErrorMessage))
        {
            <span class="text text-danger">@_avatarErrorMessage</span>
        }
    </GridColumn>
</Grid>

@code {

    [Parameter]
    public int? ProfileId { get; set; }

    private string _avatarSource;
    private User _user;
    private User _newUser;
    private FileListEntry _newAvatar;

    private string _userErrorMessage;
    private string _avatarErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthenticationService.HasAccessToPage(NavigationManager.Uri))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        ProfileId ??= UserDataService.GetCurrentUser().Id;

        _user = await UserDataService.GetUser(ProfileId.Value);

        _newUser = new User
        {
            About = _user.About,
            Age = _user.Age,
            Hometown = _user.Hometown,
            HasAvatar = _user.HasAvatar,
            Username = _user.Username,
            Email = _user.Email,
            IsEmailConfirmed = _user.IsEmailConfirmed,
            Job = _user.Job,
            Fullname = _user.Fullname,
            TagIds = _user.TagIds,
            Id = _user.Id
        };

        if (_user.HasAvatar)
            _avatarSource = $"/users/avatars/{_user.AvatarFilename}";
        else
            _avatarSource = "/libs/fontawesome-free-5.13.0/sprites/solid.svg#user";
    }

    private async Task SaveUser()
    {
        var result = await HttpClient.PatchJsonAsync<ApiResult>("api/users/@me", _newUser);

        UserDataService.SetCurrentUser(result.GetData<User>());
    }

    private bool CanSave()
    {
        if(_newUser.Age < 0)
            return false;

        //cant save if both values are null or empty or both values are the same
        if (_user.Job != _newUser.Job && (!string.IsNullOrEmpty(_user.Job) || !string.IsNullOrEmpty(_newUser.Job)))
            return true;
        if (_user.Age != _newUser.Age)
            return true;
        if (_user.Hometown != _newUser.Hometown && (!string.IsNullOrEmpty(_user.Hometown) || !string.IsNullOrEmpty(_newUser.Hometown)))
            return true;
        if (_user.About != _newUser.About && (!string.IsNullOrEmpty(_user.About) || !string.IsNullOrEmpty(_newUser.About)))
            return true;

        return false;
    }

    private bool CanSaveAvatar()
    {
        if(_newAvatar == null)
            return false;

        if (_newAvatar.Size > 8000000)
        {
            _avatarErrorMessage = "Avatar cannot be larger than 8MB";
            return false;
        }

        _avatarErrorMessage = null;
        return true;
    }

    private Task OnJobChange(string value)
    {
        _newUser.Job = value;

        StateHasChanged();

        return Task.CompletedTask;
    }


    private Task OnAgeChange(string value)
    {
        _newUser.Age = int.Parse(value);

        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnHometownChange(string value)
    {
        _newUser.Hometown = value;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private Task OnAboutChange(string value)
    {
        _newUser.About = value;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private void OnAvatarChange(FileListEntry file)
    {
        _newAvatar = file;

        StateHasChanged();
    }

    private async Task OnAvatarSave()
    {
        using (MemoryStream stream = new MemoryStream())
        using (StreamReader reader = new StreamReader(stream))
        {
            await _newAvatar.Data.CopyToAsync(stream);

            byte[] bytes = stream.ToArray();

            var byteContent = new ByteArrayContent(bytes);

            byteContent.Headers.Remove("Content-Type");
            byteContent.Headers.Add("Content-Type", _newAvatar.Type);

            var result = await HttpClient.PutAsync("api/users/@me/avatar", byteContent);
        }

    }

}
