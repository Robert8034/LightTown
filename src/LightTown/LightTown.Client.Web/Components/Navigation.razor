@using LightTown.Client.Services.Users
@using User = LightTown.Core.Models.Users.User
@inject IUserDataService UserDataService
@inject IUserAuthService UserAuthService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<nav class="navigation navbar navbar-expand-lg navbar-dark">
    <a class="navbar-brand" href="#">LightTown</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            @* TODO add required links here *@
            <li class="nav-item @(_relativeUrl == "/" ? "active" : "")">
                <a class="nav-link" href="/">Timeline</a>
            </li>
            <li class="nav-item @(_relativeUrl == "/projects" ? "active" : "")">
                <a class="nav-link" href="/projects">Projects</a>
            </li>
            <li class="nav-item @(_relativeUrl == "/management" ? "active" : "")">
                <a class="nav-link" href="/management">Management</a>
            </li>
        </ul>
        @* TODO replace code below with user info OR leave empty if user is not logged in *@
        <ul class="navbar-nav">
            @if (UserAuthService.IsAuthorized())
            {
                User currentUser = UserDataService.GetCurrentUser();
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @currentUser.Username
                    </a>
                    <div class="dropdown-menu dropdown-menu-right">
                        <a class="dropdown-item" href="profile">Profile</a>
                        <div class="dropdown-divider"></div>
                        <h6 class="dropdown-header">Manage</h6>
                        <a class="dropdown-item" href="#">Users</a>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick="OnSwitchTheme">Switch Theme</div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick="OnLogout">Logout</div>
                    </div>
                </li>
            }
            else
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="login" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Guest
                    </a>
                    <div class="dropdown-menu dropdown-menu-right">
                        <a class="dropdown-item" href="login">Login</a>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick="OnSwitchTheme">Switch Theme</div>
                    </div>
                </li>
            }
        </ul>
    </div>
</nav>

@code
{
    private string _relativeUrl;

    protected override void OnInitialized()
    {
        UserDataService.OnUserDataChange += Refresh;
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        _relativeUrl = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        base.OnInitialized();
    }

    private void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        _relativeUrl = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        StateHasChanged();
    }

    public Task Refresh()
    {
        StateHasChanged();

        return Task.CompletedTask;
    }

    private void OnSwitchTheme()
    {
        JsRuntime.InvokeVoidAsync("switchTheme");
    }

    private void OnLogout()
    {
        UserAuthService.UnloadAuthentication();

        NavigationManager.NavigateTo("/login");
    }
}
